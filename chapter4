{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome to Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shivam414/Training_DeepLearning_UDACity/blob/chapter4/chapter4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p-VjSnTkhxtV"
      },
      "source": [
        "import tensorflow as tf"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d6x0Exe3h4Bp"
      },
      "source": [
        "import tensorflow_datasets as tfds"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t3hPuRGviFIw"
      },
      "source": [
        "tfds.disable_progress_bar()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cgCeF4gYiQh6"
      },
      "source": [
        "import math\n",
        "import numpy as np\n",
        "import logging\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RVK5zRYhiU34"
      },
      "source": [
        "logger = tf.get_logger()\n",
        "logger.setLevel(logging.ERROR)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XBGWHVEMi7Lh",
        "outputId": "c9e6fcce-6d72-4b28-8c2a-9dd76f5472fe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)\n",
        "train_dataset, test_dataset = dataset['train'], dataset['test']"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1mDownloading and preparing dataset fashion_mnist/3.0.1 (download: 29.45 MiB, generated: 36.42 MiB, total: 65.87 MiB) to /root/tensorflow_datasets/fashion_mnist/3.0.1...\u001b[0m\n",
            "Shuffling and writing examples to /root/tensorflow_datasets/fashion_mnist/3.0.1.incompleteNLQJ7L/fashion_mnist-train.tfrecord\n",
            "Shuffling and writing examples to /root/tensorflow_datasets/fashion_mnist/3.0.1.incompleteNLQJ7L/fashion_mnist-test.tfrecord\n",
            "\u001b[1mDataset fashion_mnist downloaded and prepared to /root/tensorflow_datasets/fashion_mnist/3.0.1. Subsequent calls will reuse this data.\u001b[0m\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3fPnLqXjR3M"
      },
      "source": [
        "class_name = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
        "              'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pN5tCNmpkEJz",
        "outputId": "1c32cca8-9541-4688-9bcc-abcc98171fae",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "num_train_examples = metadata.splits['train'].num_examples\n",
        "num_test_examples = metadata.splits['test'].num_examples\n",
        "\n",
        "print(f\"Number of train data is: {num_train_examples}\")\n",
        "print(f\"Number of test data is: {num_test_examples}\")"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of train data is: 60000\n",
            "Number of test data is: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GgCXo-oVkIxN"
      },
      "source": [
        "def normalize(images, labels):\n",
        "  images = tf.cast(images, tf.float32)\n",
        "  images /= 255\n",
        "  return images, labels\n",
        "\n",
        "train_dataset = train_dataset.map(normalize)\n",
        "test_dataset = test_dataset.map(normalize)\n",
        "\n",
        "train_dataset = train_dataset.cache()\n",
        "test_dataset = test_dataset.cache()"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XaDSVUrvlkLT",
        "outputId": "45a10f80-f404-42a8-ce42-83fe66e59129",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        }
      },
      "source": [
        "for image, label in test_dataset.take(1):\n",
        "  break\n",
        "\n",
        "image = image.numpy().reshape((28,28))\n",
        "\n",
        "plt.figure()\n",
        "plt.imshow(image, cmap = plt.cm.binary)\n",
        "plt.colorbar()\n",
        "plt.grid(False)\n",
        "plt.show()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BGHOmRgYmPrX",
        "outputId": "a6728d98-653f-4f33-e219-9ef3e0cad760",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        }
      },
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "i = 0\n",
        "for (image,label) in test_dataset.take(25):\n",
        "  image = image.numpy().reshape((28,28))\n",
        "  plt.subplot(5,5,i+1)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "  plt.grid(False)\n",
        "  plt.imshow(image, cmap=plt.cm.binary)\n",
        "  plt.xlabel(class_name[label])\n",
        "  i += 1\n",
        "plt.show()\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 25 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7341MTHKnZjJ"
      },
      "source": [
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Conv2D(32, (3,3), padding='same', activation=tf.nn.relu, input_shape=(28, 28, 1)),\n",
        "    tf.keras.layers.MaxPool2D((2,2), strides=2),\n",
        "    tf.keras.layers.Conv2D(64, (3,3), padding='same', activation=tf.nn.relu),\n",
        "    tf.keras.layers.MaxPool2D((2,2), strides= 2),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(128, activation = tf.nn.relu),\n",
        "    tf.keras.layers.Dense(10, activation = tf.nn.softmax)\n",
        "])"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LpBg_v31pdsI"
      },
      "source": [
        "model.compile(optimizer = 'adam',\n",
        "              loss = tf.keras.losses.SparseCategoricalCrossentropy(),\n",
        "              metrics = ['accuracy'])"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mmib09R94Jyv"
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "train_dataset = train_dataset.cache ().repeat().shuffle(num_train_examples).batch(BATCH_SIZE)\n",
        "test_dataset = test_dataset.cache().batch(BATCH_SIZE)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jcjfkgAo46bu",
        "outputId": "2eed5184-d0fa-4876-da2b-da7f62717a2b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.fit(train_dataset, epochs= 10, steps_per_epoch=math.ceil(num_train_examples/BATCH_SIZE))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "1875/1875 [==============================] - 41s 3ms/step - loss: 0.3915 - accuracy: 0.8587\n",
            "Epoch 2/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.2589 - accuracy: 0.9046\n",
            "Epoch 3/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.2089 - accuracy: 0.9223\n",
            "Epoch 4/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.1778 - accuracy: 0.9350\n",
            "Epoch 5/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.1506 - accuracy: 0.9434\n",
            "Epoch 6/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.1278 - accuracy: 0.9530\n",
            "Epoch 7/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.1101 - accuracy: 0.9593\n",
            "Epoch 8/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.0926 - accuracy: 0.9660\n",
            "Epoch 9/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.0778 - accuracy: 0.9706\n",
            "Epoch 10/10\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.0653 - accuracy: 0.9757\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f916e176910>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3K4mvAV16e3H",
        "outputId": "d38786d5-840b-44f2-d06d-1012bc8ad8e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "test_loss, test_accuracy = model.evaluate(test_dataset, steps = math.ceil(num_test_examples/BATCH_SIZE))\n",
        "print(f\"The test accuracy is: {test_accuracy}\")"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 2s 5ms/step - loss: 0.3388 - accuracy: 0.9160\n",
            "The test accuracy is: 0.9160000085830688\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pz374yNq6xZe"
      },
      "source": [
        "for test_images, test_labels in test_dataset.take(1):\n",
        "  test_images = test_images.numpy()\n",
        "  test_labels = test_labels.numpy()\n",
        "  predictions = model.predict(test_images)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FWKv3k_d7AXI",
        "outputId": "626610d6-006f-4a47-9308-bbecbe38c26d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "predictions.shape"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32, 10)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LOOtEY0c7C0L",
        "outputId": "7b8b0c88-80a8-43cb-be3c-03b916c4bb8f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "predictions[0]"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.6548349e-11, 3.4075780e-13, 8.3411433e-06, 6.3899526e-13,\n",
              "       9.9264479e-01, 6.4142793e-16, 7.3469137e-03, 5.2464953e-17,\n",
              "       7.5522021e-13, 7.7030038e-10], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vabbkp_z7F1b",
        "outputId": "98002b0c-4bb5-4b15-a2dc-059b8475db7a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "np.argmax(predictions[0])"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "52dLBpU_7Iub",
        "outputId": "a4623b6c-7cac-4a86-ab06-752d64cd2a11",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "test_labels[0]"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dG0Ji55m7TZB"
      },
      "source": [
        "def plot_image(i, predictions_array, true_labels, images):\n",
        "  predictions_array, true_label, img = predictions_array[i], true_labels[i], images[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "  \n",
        "  plt.imshow(img[...,0], cmap=plt.cm.binary)\n",
        "\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "  if predicted_label == true_label:\n",
        "    color = 'blue'\n",
        "  else:\n",
        "    color = 'red'\n",
        "  \n",
        "  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_name[predicted_label],\n",
        "                                100*np.max(predictions_array),\n",
        "                                class_name[true_label]),\n",
        "                                color=color)\n",
        "\n",
        "def plot_value_array(i, predictions_array, true_label):\n",
        "  predictions_array, true_label = predictions_array[i], true_label[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
        "  plt.ylim([0, 1])\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "  \n",
        "  thisplot[predicted_label].set_color('red')\n",
        "  thisplot[true_label].set_color('blue')"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DmNOZL6_7XOk",
        "outputId": "0de7d31b-5ef9-4ecb-8360-d5dc40ca1160",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        }
      },
      "source": [
        "i = 0\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions, test_labels, test_images)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions, test_labels)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9OHJxR-Z7nWC",
        "outputId": "a72c44bb-d306-4a18-f5e4-85ac9ff8a58e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        }
      },
      "source": [
        "i = 12\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions, test_labels, test_images)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions, test_labels)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZtBbSlC_7rXX",
        "outputId": "8317bfb4-9d03-4d90-e04d-211f3ee5f0db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        }
      },
      "source": [
        "num_rows = 5\n",
        "num_cols = 3\n",
        "num_images = num_rows*num_cols\n",
        "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
        "for i in range(num_images):\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
        "  plot_image(i, predictions, test_labels, test_images)\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
        "  plot_value_array(i, predictions, test_labels)\n"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 30 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5u5VqvBH7vou",
        "outputId": "ee66cc53-af3a-45aa-ad36-6ebd25191394",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Grab an image from the test dataset\n",
        "img = test_images[0]\n",
        "\n",
        "print(img.shape)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(28, 28, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tLoaJwyA7-28",
        "outputId": "fa2f33bd-3e37-4a17-f465-5c34416df427",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 779
        }
      },
      "source": [
        "predictions_single = model.predict(img)\n",
        "\n",
        "print(predictions_single)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-8066be507105>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions_single\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions_single\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1725\u001b[0m           \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1726\u001b[0m             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_predict_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1727\u001b[0;31m             \u001b[0mtmp_batch_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1728\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1729\u001b[0m               \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    922\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    923\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 924\u001b[0;31m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    925\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_created_variables\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    926\u001b[0m         raise ValueError(\"Creating variables on a non-first call to a function\"\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3020\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3021\u001b[0m       (graph_function,\n\u001b[0;32m-> 3022\u001b[0;31m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0m\u001b[1;32m   3023\u001b[0m     return graph_function._call_flat(\n\u001b[1;32m   3024\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   3439\u001b[0m               call_context_key in self._function_cache.missed):\n\u001b[1;32m   3440\u001b[0m             return self._define_function_with_shape_relaxation(\n\u001b[0;32m-> 3441\u001b[0;31m                 args, kwargs, flat_args, filtered_flat_args, cache_key_context)\n\u001b[0m\u001b[1;32m   3442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3443\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmissed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcall_context_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_define_function_with_shape_relaxation\u001b[0;34m(self, args, kwargs, flat_args, filtered_flat_args, cache_key_context)\u001b[0m\n\u001b[1;32m   3361\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m     graph_function = self._create_graph_function(\n\u001b[0;32m-> 3363\u001b[0;31m         args, kwargs, override_flat_arg_shapes=relaxed_arg_shapes)\n\u001b[0m\u001b[1;32m   3364\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marg_relaxed\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrank_only_cache_key\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_create_graph_function\u001b[0;34m(self, args, kwargs, override_flat_arg_shapes)\u001b[0m\n\u001b[1;32m   3287\u001b[0m             \u001b[0marg_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marg_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3288\u001b[0m             \u001b[0moverride_flat_arg_shapes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moverride_flat_arg_shapes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3289\u001b[0;31m             capture_by_value=self._capture_by_value),\n\u001b[0m\u001b[1;32m   3290\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_attributes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3291\u001b[0m         \u001b[0mfunction_spec\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_spec\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mfunc_graph_from_py_func\u001b[0;34m(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\u001b[0m\n\u001b[1;32m    997\u001b[0m         \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moriginal_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_decorator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpython_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    998\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 999\u001b[0;31m       \u001b[0mfunc_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpython_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfunc_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfunc_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1000\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1001\u001b[0m       \u001b[0;31m# invariant: `func_outputs` contains only Tensors, CompositeTensors,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36mwrapped_fn\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    670\u001b[0m         \u001b[0;31m# the function a weak reference to itself to avoid a reference cycle.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    671\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompile_with_xla\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 672\u001b[0;31m           \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweak_wrapped_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__wrapped__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    673\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    674\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    984\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    985\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 986\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    987\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    988\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: in user code:\n\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1569 predict_function  *\n        return step_function(self, iterator)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1559 step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:1285 run\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:2833 call_for_each_replica\n        return self._call_for_each_replica(fn, args, kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:3608 _call_for_each_replica\n        return fn(*args, **kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1552 run_step  **\n        outputs = model.predict_step(data)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1525 predict_step\n        return self(x, training=False)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py:1013 __call__\n        input_spec.assert_input_compatibility(self.input_spec, inputs, self.name)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/input_spec.py:235 assert_input_compatibility\n        str(tuple(shape)))\n\n    ValueError: Input 0 of layer sequential is incompatible with the layer: : expected min_ndim=4, found ndim=3. Full shape received: (None, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qw1V_XPO8iHd",
        "outputId": "a7e12e88-c2fe-4582-8929-723390ae163e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        }
      },
      "source": [
        "plot_value_array(0, predictions_single, test_labels)\n",
        "_ = plt.xticks(range(10), class_names, rotation=45)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-e5a6aaf7e6cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplot_value_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredictions_single\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m45\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'predictions_single' is not defined"
          ]
        }
      ]
    }
  ]
}